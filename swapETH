// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
contract DepositContract {
    address public contractOwner;
    address public tokenAddress; // Address of the ERC20 token contract
    uint256 public feePercentage = 5; // 5% fee
    uint256 public ethToTokenRatio = 1e18; // 1 ETH = 1 ERC20 token (in Wei)

    event Deposit(address indexed from, uint256 ethAmount, uint256 erc20Amount);
    event Withdraw(address indexed to, uint256 erc20Amount);

    constructor(address _tokenAddress) {
        contractOwner = msg.sender;
        tokenAddress = _tokenAddress;
    }

    // Fallback function to accept Ether deposits and mint ERC20 tokens
    receive() external payable {
        require(msg.value > 0, "Ether deposit amount must be greater than 0");

        // Calculate the equivalent ERC20 token amount based on Ether deposited
        uint256 erc20Amount = (msg.value * ethToTokenRatio) / 1 ether;

        // Calculate the fee amount
        uint256 feeAmount = (erc20Amount * feePercentage) / 100;

        // Deduct the fee from the ERC20 token amount
        uint256 amountAfterFee = erc20Amount - feeAmount;

        IERC20 token = IERC20(tokenAddress); // Initialize the ERC20 token instance
        token.transfer(msg.sender, amountAfterFee);
        emit Deposit(msg.sender, msg.value, amountAfterFee);

        // Forward Ether to the contract owner's wallet
        payable(contractOwner).transfer(msg.value);
    }

    // Function for the owner to withdraw ERC20 tokens from the contract
    function withdrawERC20(uint256 _amount) external {
        require(msg.sender == contractOwner, "Only the contract owner can withdraw ERC20 tokens");
        IERC20 token = IERC20(tokenAddress);
        token.transfer(msg.sender, _amount);
        emit Withdraw(msg.sender, _amount);
    }

    // Function to change the fee percentage (only callable by the contract owner)
    function changeFeePercentage(uint256 _newFeePercentage) external {
        require(msg.sender == contractOwner, "Only the contract owner can change the fee percentage");
        require(_newFeePercentage <= 100, "Fee percentage cannot exceed 100%");
        feePercentage = _newFeePercentage;
    }

    // Function to change the ETH to token ratio (only callable by the contract owner)
    function changeEthToTokenRatio(uint256 _newEthToTokenRatio) external {
        require(msg.sender == contractOwner, "Only the contract owner can change the ETH to token ratio");
        ethToTokenRatio = _newEthToTokenRatio;
    }

    // Function to withdraw any ETH accidentally sent to the contract (only callable by the contract owner)
    function withdrawEther(uint256 _amount) external {
        require(msg.sender == contractOwner, "Only the contract owner can withdraw ETH");
        payable(msg.sender).transfer(_amount);
    }
}
